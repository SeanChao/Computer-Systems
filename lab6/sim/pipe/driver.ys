#######################################################################
# Test for copying block of size 3;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $3, %rdx		# src and dst have 3 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	call check	        # Call checker code
	halt                    # should halt with 0xaaaa in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# name: 施超 ID: 518021910499
# Describe how and why you modified the baseline code.
# 1. use iaddq to replace irmovq+addq
# 2. apply 8*1 loop unrolling to reduce loop overhead and avoid load/use hazard
# 3. implement a search table to speed up the process of copying the last 1~7
#    elements
# 4. read the last element in advance to avoid load/use hazard in the final part
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	# xorq %rax,%rax	# count = 0;
	iaddq $-8, %rdx		# len -= 8
	jl Last				# handles <8 elements

Loop:
	mrmovq (%rdi), %r8	# read val from src...
	mrmovq 8(%rdi), %r9
	mrmovq 16(%rdi), %r10
	mrmovq 24(%rdi), %r11
	mrmovq 32(%rdi), %r12
	mrmovq 40(%rdi), %r13
	mrmovq 48(%rdi), %r14
	mrmovq 56(%rdi), %rcx
	mrmovq 64(%rdi), %rbp
	rmmovq %r8, (%rsi)	# ...and store it to dst
	rmmovq %r9, 8(%rsi)
	rmmovq %r10, 16(%rsi)
	rmmovq %r11, 24(%rsi)
	rmmovq %r12, 32(%rsi)
	rmmovq %r13, 40(%rsi)
	rmmovq %r14, 48(%rsi)
	rmmovq %rcx, 56(%rsi)
	rmmovq %rbp, 64(%rsi)
	andq %r8, %r8		# val <= 0?
	jle N1				# if so, goto next:
	iaddq $1, %rax		# count++
N1:	andq %r9, %r9		# val <= 0?
	jle N2				# if so, goto next:
	iaddq $1, %rax		# count++
N2:	andq %r10, %r10		# val <= 0?
	jle N3				# if so, goto next:
	iaddq $1, %rax		# count++
N3:	andq %r11, %r11		# val <= 0?
	jle N4				# if so, goto next:
	iaddq $1, %rax		# count++
N4:	andq %r12, %r12		# val <= 0?
	jle N5				# if so, goto next:
	iaddq $1, %rax		# count++
N5:	andq %r13, %r13		# val <= 0?
	jle N6				# if so, goto next:
	iaddq $1, %rax		# count++
N6:	andq %r14, %r14		# val <= 0?
	jle N7				# if so, goto next:
	iaddq $1, %rax		# count++
N7:	andq %rcx, %rcx		# val <= 0?
	jle N8				# if so, goto Npos:
	iaddq $1, %rax		# count++
N8:	andq %rbp, %rbp		# val <= 0?
	jle Npos			# if so, goto next:
	iaddq $1, %rax		# count++
Npos:
	iaddq $72, %rdi		# src += 8
	iaddq $72, %rsi		# dst += 8
	iaddq $-9, %rdx		# len -= 8
	jge Loop			# if length >= 8, loop

# handling rest part
Last:
	mrmovq (%rdi), %r8	# load last element in advance
	iaddq $6, %rdx
	jge GE3
LE2:
	iaddq $2, %rdx
	jl Done
	rmmovq %r8, (%rsi)
	je R1
	jg R2
LE6:
	iaddq $3, %rdx
	jl R4
	je R5
	jg R6
GE3:
	rmmovq %r8, (%rsi)
	je R3
NN:	iaddq $-4, %rdx
	jl LE6
	je R7

R8:
	andq %r8, %r8
	mrmovq 56(%rdi), %r8
	jle A8
	iaddq $1, %rax
A8:	rmmovq %r8, 56(%rsi)
R7:
	andq %r8, %r8
	mrmovq 48(%rdi), %r8
	jle A7
	iaddq $1, %rax
A7:	rmmovq %r8, 48(%rsi)
R6:
	andq %r8, %r8
	mrmovq 40(%rdi), %r8
	jle A6
	iaddq $1, %rax
A6:	rmmovq %r8, 40(%rsi)
R5:
	andq %r8, %r8
	mrmovq 32(%rdi), %r8
	jle A5
	iaddq $1, %rax
A5:	rmmovq %r8, 32(%rsi)
R4:
	andq %r8, %r8
	mrmovq 24(%rdi), %r8
	jle A4
	iaddq $1, %rax
A4:	rmmovq %r8, 24(%rsi)
R3:
	andq %r8, %r8
	mrmovq 16(%rdi), %r8
	jle A3
	iaddq $1, %rax
A3:	rmmovq %r8, 16(%rsi)
R2:
	andq %r8, %r8
	mrmovq 8(%rdi), %r8
	jle A2
	iaddq $1, %rax
A2:	rmmovq %r8, 8(%rsi)
R1:	
	andq %r8, %r8
	jle Done
	iaddq $1, %rax
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:
#################################################################### 
# Epilogue code for the correctness testing driver
####################################################################

# This is the correctness checking code.
# It checks:
#   1. %rax has 1.  Set %rax to 0xbbbb if not.
#   2. The total length of the code is less than or equal to 1000.
#      Set %rax to 0xcccc if not.
#   3. The source data was copied to the destination.
#      Set %rax to 0xdddd if not.
#   4. The words just before and just after the destination region
#      were not corrupted.  Set %rax to 0xeeee if not.
# If all checks pass, then sets %rax to 0xaaaa
check:
	# Return value test
	irmovq $1,%r10
	subq %r10,%rax
	je checkb
	irmovq $0xbbbb,%rax  # Failed test #1
	jmp cdone
checkb:
	# Code length check
	irmovq EndFun,%rax
	irmovq StartFun,%rdx
	subq %rdx,%rax
	irmovq $1000,%rdx
	subq %rax,%rdx
	jge checkm
	irmovq $0xcccc,%rax  # Failed test #2
	jmp cdone
checkm:
	irmovq dest, %rdx # Pointer to next destination location
	irmovq src,%rbx   # Pointer to next source location
	irmovq $3,%rdi  # Count
	andq %rdi,%rdi
	je checkpre         # Skip check if count = 0
mcloop:
	mrmovq (%rdx),%rax
	mrmovq (%rbx),%rsi
	subq %rsi,%rax
	je  mok
	irmovq $0xdddd,%rax # Failed test #3
	jmp cdone
mok:
	irmovq $8,%rax
	addq %rax,%rdx	  # dest ++
	addq %rax,%rbx    # src++
	irmovq $1,%rax
	subq %rax,%rdi    # cnt--
	jg mcloop
checkpre:
	# Check for corruption
	irmovq Predest,%rdx
	mrmovq (%rdx), %rax  # Get word before destination
	irmovq $0xbcdefa, %rdx
	subq %rdx,%rax
	je checkpost
	irmovq $0xeeee,%rax  # Failed test #4
	jmp cdone
checkpost:
	# Check for corruption
	irmovq Postdest,%rdx
	mrmovq (%rdx), %rax  # Get word after destination
	irmovq $0xdefabc, %rdx
	subq %rdx,%rax
	je checkok
	irmovq $0xeeee,%rax # Failed test #4
	jmp cdone
checkok:
	# Successful checks
	irmovq $0xaaaa,%rax
cdone:
	ret

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad -1
	.quad -2
	.quad 3
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
